# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'main2.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import sys
import re
import mysql.connector
from PyQt5 import QtWidgets, QtGui
from PyQt5.QtWidgets import QDialog, QApplication,QMessageBox
from PyQt5.uic import loadUi
from PyQt5 import QtCore, QtGui, QtWidgets



class Ui_Form(object):
    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(400, 530)
        self.add = QtWidgets.QPushButton(Form)
        self.add.setGeometry(QtCore.QRect(140, 110, 101, 23))
        self.add.setObjectName("add")
        self.delete_2 = QtWidgets.QPushButton(Form)
        self.delete_2.setGeometry(QtCore.QRect(140, 160, 101, 23))
        self.delete_2.setObjectName("delete_2")
        self.update = QtWidgets.QPushButton(Form)
        self.update.setGeometry(QtCore.QRect(140, 210, 101, 23))
        self.update.setObjectName("update")
        self.search = QtWidgets.QPushButton(Form)
        self.search.setGeometry(QtCore.QRect(140, 280, 101, 23))
        self.search.setObjectName("search")
        self.viewall = QtWidgets.QPushButton(Form)
        self.viewall.setGeometry(QtCore.QRect(140, 350, 101, 23))
        self.viewall.setObjectName("viewall")

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Form"))
        self.add.setText(_translate("Form", "add"))
        self.delete_2.setText(_translate("Form", "supprimer"))
        self.update.setText(_translate("Form", "modifier"))
        self.search.setText(_translate("Form", "search"))
        self.viewall.setText(_translate("Form", "view all products"))
'''class AdminMainWindow(QtWidgets.QMainWindow):
    def __init__(self):
        super(AdminMainWindow, self).__init__()
        loadUi("main2.ui", self)
        self.model = QtGui.QStandardItemModel()
        self.add.clicked.connect(self.add_item)
        self.delete_2.clicked.connect(self.update_item)
        self.update.clicked.connect(self.delete_item)
        self.populate_list()

    def add_item(self):
        name = self.name_edit.toPlainText()
        description = self.description_edit.toPlainText()
        price = self.price_edit.toPlainText()
        category = self.category_edit.toPlainText()
        self.model.appendRow([QtGui.QStandardItem(name), QtGui.QStandardItem(description), QtGui.QStandardItem(price), QtGui.QStandardItem(category)])

    def update_item(self):
        selected_indexes = self.listview.selectedIndexes()
        if selected_indexes:
            selected_row = selected_indexes[0].row()
            self.model.setData(self.model.index(selected_row, 0), self.name_edit.toPlainText())
            self.model.setData(self.model.index(selected_row, 1), self.description_edit.toPlainText())
            self.model.setData(self.model.index(selected_row, 2), self.price_edit.toPlainText())
            self.model.setData(self.model.index(selected_row, 3), self.category_edit.toPlainText())

    def delete_item(self):
        selected_indexes = self.listview.selectedIndexes()
        if selected_indexes:
            selected_row = selected_indexes[0].row()
            self.model.removeRow(selected_row)

    def populate_list(self):
        mydb = mysql.connector.connect(
            host="localhost",
            user="root",
            password="",
            database="gds"
        )
        mycursor = mydb.cursor()
        mycursor.execute("SELECT * FROM products")
        results = mycursor.fetchall()
        for row in results:
            name = row[0]
            description = row[1]
            price = row[2]
            category = row[3]
            self.model.appendRow([QtGui.QStandardItem(name), QtGui.QStandardItem(description), QtGui.QStandardItem(price), QtGui.QStandardItem(category)])
        mycursor.close()
        mydb.close()

    def go_to_create(self):
        create_acc = CreateAcc()
        widget.addWidget(create_acc)
        widget.setCurrentIndex(widget.currentIndex() + 1)
'''

class Login(QDialog):
    def __init__(self):
        super(Login, self).__init__()
        loadUi("login.ui", self)
        self.loginbutton.clicked.connect(self.login_function)
        self.password.setEchoMode(QtWidgets.QLineEdit.Password)
        self.createaccbutton.clicked.connect(self.go_to_create)
    
    def login_function(self):
        username = self.username.text()
        password = self.password.text()
        mydb = mysql.connector.connect(
            host="localhost",
            user="root",
            password="",
            database="gds"
        )
        mycursor = mydb.cursor()
        mycursor.execute("SELECT * FROM user WHERE username=%s AND password=%s", (username,password[::-1]))
        result = mycursor.fetchone()
        if username=="Admin" and password=="Admin":
            QMessageBox.information(self, "succes", "logged in as admin")
            from admin import main
            print("je rentre ici 3")
            
            print("je rentre ici 1")
            
            print("je rentre ici 2")
            window = main()
            window.show()
            
        elif not username or not password:
            QtWidgets.QMessageBox.warning(self, "error", "please fill all the fields")
                    
        elif result:
            QMessageBox.information(self, "success", "succesfully logged in as user")
            from admin import main2
            self.hide()
            admin_window = main2()
            admin_window.show()

        
        else:
            QtWidgets.QMessageBox.warning(self, "error", "username or password invalid")
       

    def go_to_create(self):
        create_acc = CreateAcc()
        widget.addWidget(create_acc)
        widget.setCurrentIndex(widget.currentIndex() + 1)



class CreateAcc(QDialog):
    def __init__(self):
        super(CreateAcc,self).__init__()
        loadUi("creatacc2.ui",self)
        self.signupbutton.clicked.connect(self.createaccfunction)
        self.password.setEchoMode(QtWidgets.QLineEdit.Password)
        self.confirmpass.setEchoMode(QtWidgets.QLineEdit.Password)
        self.return_2.clicked.connect(self.go_to_login)

    def createaccfunction(self):
        email = self.email.text()
        password = self.password.text()
        username = self.username.text() # get the input from the username QLineEdit widget
        confirmpass=self.confirmpass.text()
        mydb = mysql.connector.connect(
            host="localhost",
            user="root",
            password="",
            database="gds"
        )      
        if not username or not email or not password or not confirmpass:
            QtWidgets.QMessageBox.warning(self, "Error", "Please fill all the fields.")
            return
        if not re.match(r"[^@]+@[^@]+\.[^@]+", email):
            QtWidgets.QMessageBox.warning(self, "Error", "Please enter a valid email address.")
            return
        if len(password) < 8:
            QtWidgets.QMessageBox.warning(self, "Error", "Password must be at least 8 characters.")
            return
        if password != self.confirmpass.text():
            QtWidgets.QMessageBox.warning(self, "Error", "Passwords do not match.")
            return
        if not username: # add a condition to check if the username field is not empty
            QtWidgets.QMessageBox.warning(self, "Error", "Please enter a username.")
            return
        else:
            def check_username(username,connection):
                query = "SELECT * FROM user WHERE username = %s"
                cursor = connection.cursor()  
                cursor.execute(query, (username,))
                result = cursor.fetchone()
                if result:
                    QtWidgets.QMessageBox.warning(self, "Error", "Username already exists")
                    return True
                else:
                    return False
            username_exists = check_username(connection=mydb, username=username)
        if username_exists is not False:
            return
        
        


        def check_email(email,connection):
                query = "SELECT * FROM user WHERE email = %s"
                cursor = connection.cursor()  
                cursor.execute(query, (email))
                result = cursor.fetchone()
                if result:
                    QtWidgets.QMessageBox.warning(self, "Error", "email already exists")
                else:
                    return False
                email_exists = check_email(connection=mydb, email=email)
                if email_exists:
                    QtWidgets.QMessageBox.warning(self, "Error", "email already exists")
       
        mydb = mysql.connector.connect(
                host="localhost",
                user="root",
                password="",
                database="gds"
            )      
        cursor = mydb.cursor()

        # Insert user data into the database
        sql = "INSERT INTO user (username, email, password) VALUES (%s, %s, %s)"
        val = (username, email, password[::-1])
        cursor.execute(sql, val)

        mydb.commit()  # commit changes to the database
        self.signupbutton.clicked.connect(self.go_to_login)
        
        login=Login()
        widget.addWidget(login)
        widget.setCurrentIndex(widget.currentIndex()+1)

    def go_to_login(self):
        widget.setCurrentIndex(widget.currentIndex()-1)

'''app = QApplication(sys.argv)
mainwindow = Login()
widget = QtWidgets.QStackedWidget()
widget.addWidget(mainwindow)
widget.setFixedWidth(770)
widget.setFixedHeight(620)
widget.show()
sys.exit(app.exec_())'''
app=QApplication(sys.argv)
mainwindow=Login()
widget=QtWidgets.QStackedWidget()
widget.addWidget(mainwindow)
widget.setFixedWidth(770)
widget.setFixedHeight(620)
widget.show()
app.exec_()

